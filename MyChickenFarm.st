SpPresenter subclass: #ChickenAdminApp	instanceVariableNames: 'chickens chickenList nameInput addButton layEggButton topChickenLabel selectedChicken'	classVariableNames: ''	package: 'MyChickenFarm'!!ChickenAdminApp methodsFor: 'initialization' stamp: '4/22/2025 11:08'!initialize	| repository |    repository := ChickenRepository uniqueInstance. "repository needs to be assigned before call to initializePresenters"    chickens := repository chickens.    super initialize.! !!ChickenAdminApp methodsFor: 'initialization' stamp: '4/22/2025 10:20'!initializePresenters    chickenList := self newList.    nameInput := self newTextInput.    addButton := self newButton.    layEggButton := self newButton.    topChickenLabel := self newLabel.        chickenList        items: chickens;        display: [:chicken | chicken name, ' (', chicken eggCount asString, ' eggs)'];        whenSelectionChangedDo: [:selection |             selectedChicken := selection selectedItem.            self updateLayEggButtonState].                nameInput placeholder: 'New chicken name'.        addButton        label: 'Add Chicken';        icon: (self iconNamed: #add);        action: [self addChicken].            layEggButton        label: 'Lay Egg';        icon: (self iconNamed: #glamorousAdd);        action: [self layEggForSelected];        disable.            topChickenLabel label: 'Top Chicken: (none yet)'.        self updateTopChickenLabel! !!ChickenAdminApp methodsFor: 'initialization' stamp: '4/21/2025 19:08'!defaultLayout    "Arrange the presenters vertically"    ^ SpBoxLayout newVertical        add: (SpBoxLayout newHorizontal                add: nameInput expand: true;                add: addButton expand: false)            expand: false;        add: chickenList expand: true;        add: layEggButton expand: false;        add: topChickenLabel expand: false;        yourself! !!ChickenAdminApp methodsFor: 'initialization' stamp: '4/22/2025 11:07'!addChicken    | chickenName newChicken |    chickenName := nameInput text asString trimBoth.    chickenName isEmpty ifTrue: [^ self].        newChicken := Chicken named: chickenName.    "repository addChicken: newChicken."    chickens add: newChicken.    chickenList refresh.    nameInput text: ''.    self updateTopChickenLabel! !!ChickenAdminApp methodsFor: 'initialization' stamp: '4/21/2025 19:09'!layEggForSelected    selectedChicken ifNil: [^ self].        selectedChicken layEgg.    chickenList refresh.    self updateTopChickenLabel! !!ChickenAdminApp methodsFor: 'initialization' stamp: '4/21/2025 19:09'!updateLayEggButtonState    selectedChicken        ifNil: [layEggButton disable]        ifNotNil: [layEggButton enable]! !!ChickenAdminApp methodsFor: 'initialization' stamp: '4/21/2025 19:09'!updateTopChickenLabel    | topChicken message |    topChicken := self findTopChicken.        message := topChicken        ifNil: ['Top Chicken: (none yet)']        ifNotNil: ['Top Chicken: ', topChicken name, ' (', topChicken eggCount asString, ' eggs)'].            topChickenLabel label: message! !!ChickenAdminApp methodsFor: 'initialization' stamp: '4/21/2025 19:09'!findTopChicken    "Finds the chicken with the most eggs. Returns nil if no chickens."    chickens isEmpty ifTrue: [^ nil].        ^ chickens detectMax: [:chicken | chicken eggCount]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ChickenAdminApp class	instanceVariableNames: ''!!ChickenAdminApp class methodsFor: 'instance creation' stamp: '4/21/2025 19:10'!open    <script>    ^ self new open! !!ChickenAdminApp class methodsFor: 'instance creation' stamp: '4/22/2025 10:31'!resetRepository    <script>    ChickenRepository reset.    self inform: 'Repository has been reset.'! !Object subclass: #ChickenRepository	instanceVariableNames: 'chickens'	classVariableNames: ''	package: 'MyChickenFarm'!!ChickenRepository methodsFor: 'initialization' stamp: '4/22/2025 10:24'!initialize    super initialize.    chickens := OrderedCollection new.    self addTestData! !!ChickenRepository methodsFor: 'initialization' stamp: '4/22/2025 10:24'!addTestData    "Add some sample chickens for testing if repository is empty"    chickens isEmpty ifTrue: [        chickens             add: (Chicken named: 'Henrietta');            add: (Chicken named: 'Clucky');            add: (Chicken named: 'Pecky')    ]! !!ChickenRepository methodsFor: 'initialization' stamp: '4/22/2025 10:36'!chickens    ^ chickens! !!ChickenRepository methodsFor: 'initialization' stamp: '4/22/2025 10:25'!addChicken: aChicken    chickens add: aChicken.    ^ aChicken! !!ChickenRepository methodsFor: 'initialization' stamp: '4/22/2025 10:25'!topChicken    "Finds the chicken with the most eggs. Returns nil if no chickens."    chickens isEmpty ifTrue: [^ nil].        ^ chickens detectMax: [:chicken | chicken eggCount]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ChickenRepository class	instanceVariableNames: 'UniqueInstance'!!ChickenRepository class methodsFor: 'class initialization' stamp: '4/22/2025 10:26'!initialize    "Initialize the unique instance when the class is loaded"    self reset! !!ChickenRepository class methodsFor: 'class initialization' stamp: '4/22/2025 10:26'!reset    "Reset the unique instance"    UniqueInstance := nil! !!ChickenRepository class methodsFor: 'class initialization' stamp: '4/22/2025 10:26'!uniqueInstance    "Return the unique instance of this class"    UniqueInstance ifNil: [UniqueInstance := self new].    ^ UniqueInstance! !Object subclass: #Chicken	instanceVariableNames: 'name eggCount'	classVariableNames: ''	package: 'MyChickenFarm'!!Chicken methodsFor: 'initialization' stamp: '4/21/2025 19:05'!initialize    super initialize.    eggCount := 0.    name := 'Unnamed Chicken'.! !!Chicken methodsFor: 'initialization' stamp: '4/21/2025 19:05'!name    ^ name! !!Chicken methodsFor: 'initialization' stamp: '4/21/2025 19:05'!eggCount    ^ eggCount! !!Chicken methodsFor: 'initialization' stamp: '4/21/2025 19:05'!layEgg    "Increment the egg count for this chicken."    eggCount := eggCount + 1! !!Chicken methodsFor: 'initialization' stamp: '4/21/2025 19:05'!printOn: aStream    super printOn: aStream.    aStream        nextPutAll: ' (';        nextPutAll: self name;        nextPutAll: ' - ';        print: self eggCount;        nextPutAll: ' eggs)'! !!Chicken methodsFor: 'initialization' stamp: '4/22/2025 10:02'!name: aString    name := aString ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Chicken class	instanceVariableNames: ''!!Chicken class methodsFor: 'instance creation' stamp: '4/21/2025 19:06'!named: aString    "Create a new chicken with a given name."    ^ self new        name: aString;        yourself! !ChickenRepository initialize!