PackageManifest subclass: #ManifestSpecCRUDExampleUIComposition	instanceVariableNames: ''	classVariableNames: ''	package: 'SpecCRUD-Example-UI-Composition-Manifest'!!ManifestSpecCRUDExampleUIComposition commentStamp: '<historical>' prior: 0!Please describe the package using the class comment of the included manifest class. The manifest class also includes other additional metadata for the package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ManifestSpecCRUDExampleUIComposition class	instanceVariableNames: ''!!ManifestSpecCRUDExampleUIComposition class commentStamp: '<historical>' prior: 0!Please describe the package using the class comment of the included manifest class. The manifest class also includes other additional metadata for the package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser!!ManifestSpecCRUDExampleUIComposition class methodsFor: 'code-critics' stamp: '4/18/2025 11:16'!ruleCollectionMessagesToExternalObjectRuleV1FalsePositive	<ignoreForCoverage>	^ #(#(#(#RGMethodDefinition #(#PersonEditor #initializePresenters #false)) #'2025-04-18T11:16:30.715341-04:00') #(#(#RGClassDefinition #(#PersonEditor)) #'2025-04-18T11:16:36.750296-04:00') )! !Object subclass: #PersonBrowser	instanceVariableNames: 'listPresenter addButton editButton deleteButton selectedPerson mainPresenter windowPresenter'	classVariableNames: ''	package: 'SpecCRUD-Example-UI-Composition'!!PersonBrowser methodsFor: 'layout' stamp: '4/17/2025 13:47'!initializePresenters    "Create the main presenter and the UI components it will contain"    mainPresenter := SpPresenter new. "The presenter holding the layout"    listPresenter := SpListPresenter new.    listPresenter display: [ :item | item displayString ].    listPresenter whenSelectionChangedDo: [ :selection | self updateSelection: selection ].    addButton := SpButtonPresenter new                     label: 'Add';                     icon: self getIconAdd;                     action: [ self addPerson ].    editButton := SpButtonPresenter new                      label: 'Edit';                      icon: self getIconEdit;                      action: [ self editPerson ];                      disable. "Initially disabled"    deleteButton := SpButtonPresenter new                        label: 'Delete';                        icon: self getIconDelete;                        action: [ self deletePerson ];                        disable. "Initially disabled"! !!PersonBrowser methodsFor: 'layout' stamp: '4/12/2025 13:11'!updatePersonList    "Refresh the list from the repository and maintain selection if possible"    | previouslySelected |    previouslySelected := selectedPerson.    listPresenter items: PersonRepository current allPersons.    "Try to re-select the previously selected item"    (previouslySelected notNil and: [ listPresenter items includes: previouslySelected ])        ifTrue: [ listPresenter selectItem: previouslySelected ]        ifFalse: [ self updateSelection: listPresenter selection ] "Update button states even if selection cleared"! !!PersonBrowser methodsFor: 'layout' stamp: '4/12/2025 13:11'!updateSelection: aSelectionPresenter    "Called when the list selection changes"    selectedPerson := aSelectionPresenter selectedItem.    editButton enabled: selectedPerson notNil.    deleteButton enabled: selectedPerson notNil! !!PersonBrowser methodsFor: 'layout' stamp: '4/12/2025 13:11'!addPerson    "Open the editor to add a new person"    | newPerson |    newPerson := PersonEditor openModalFor: nil title: 'Add New Person'.    newPerson ifNotNil: [        PersonRepository current addPerson: newPerson.        self updatePersonList.        listPresenter selectItem: newPerson "Select the newly added item"    ]! !!PersonBrowser methodsFor: 'layout' stamp: '4/12/2025 13:12'!editPerson    "Open the editor to edit the selected person"    | editedPerson originalPerson |    selectedPerson ifNil: [ ^ self ]. "Should not happen if button is enabled, but be safe"    originalPerson := selectedPerson. "Keep track of the original instance"    editedPerson := PersonEditor openModalFor: originalPerson title: 'Edit Person'.    editedPerson ifNotNil: [        "Update the original person object in the repository with the new data"        PersonRepository current updatePerson: originalPerson with: editedPerson.        self updatePersonList. "Refresh the list"        listPresenter selectItem: originalPerson "Re-select the edited item (it's the same instance)"    ]! !!PersonBrowser methodsFor: 'layout' stamp: '4/13/2025 11:48'!deletePerson    "Delete the selected person after confirmation"    | personToDelete |    personToDelete := selectedPerson.    personToDelete ifNil: [ ^ self ]. "Should not happen"    (UIManager default confirm: 'Are you sure you want to delete ', personToDelete displayString, '?')        ifTrue: [            PersonRepository current removePerson: personToDelete.            selectedPerson := nil. "Clear selection reference"            self updatePersonList "Refresh the list"        ]			ifFalse: [ ^ nil ]			! !!PersonBrowser methodsFor: 'layout' stamp: '4/15/2025 19:09'!initialize    "Initialize the browser logic and create managed presenters"    super initialize.    self initializePresenters.    self initializeLayout.    self updatePersonList. "Load initial data"! !!PersonBrowser methodsFor: 'layout' stamp: '4/17/2025 14:23'!initializeLayout    "Define the layout and set it on the managed main presenter"    | layout |    layout := SpBoxLayout newVertical          add: listPresenter;          add: (SpBoxLayout newHorizontal                   add: addButton expand: false;                   add: editButton expand: false;                   add: deleteButton expand: false;                   yourself)              expand: false;          yourself.    mainPresenter layout: layout.! !!PersonBrowser methodsFor: 'layout' stamp: '4/15/2025 19:12'!open    "Create the window, assign the main presenter, configure, and open it"    windowPresenter := SpWindowPresenter new.    windowPresenter application: SpApplication defaultApplication. "Good practice"    windowPresenter presenter: mainPresenter. "Set the content"    windowPresenter title: 'Person CRUD (Composition)'.    windowPresenter initialExtent: 400 @ 300.        ^ windowPresenter open "Open the window"! !!PersonBrowser methodsFor: 'layout' stamp: '4/15/2025 19:14'!getIconAdd    ^ windowPresenter iconNamed: #smallAdd! !!PersonBrowser methodsFor: 'layout' stamp: '4/15/2025 19:15'!getIconEdit    ^ windowPresenter iconNamed: #smallEdit! !!PersonBrowser methodsFor: 'layout' stamp: '4/15/2025 19:15'!getIconDelete    ^ windowPresenter iconNamed: #smallDelete! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PersonBrowser class	instanceVariableNames: ''!!PersonBrowser class methodsFor: 'instance creation' stamp: '4/12/2025 13:14'!open    "Convenience method to open the browser"    <script>    ^ self new open! !Object subclass: #Person	instanceVariableNames: 'name age'	classVariableNames: ''	package: 'SpecCRUD-Example-UI-Composition'!!Person methodsFor: 'initialization' stamp: '4/12/2025 09:53'!initialize    super initialize.    name := ''.    age := 0! !!Person methodsFor: 'initialization' stamp: '4/12/2025 09:53'!name    ^ name! !!Person methodsFor: 'initialization' stamp: '4/12/2025 09:54'!name: aString    name := aString! !!Person methodsFor: 'initialization' stamp: '4/12/2025 09:54'!age    ^ age! !!Person methodsFor: 'initialization' stamp: '4/12/2025 09:54'!age: anInteger    age := anInteger! !!Person methodsFor: 'initialization' stamp: '4/12/2025 09:54'!displayString    "Used for displaying in lists"    ^ name, ' (', age asString, ')'! !!Person methodsFor: 'initialization' stamp: '4/12/2025 09:54'!printOn: aStream    "Standard printing"    super printOn: aStream.    aStream nextPut: $(.    self displayString printOn: aStream.    aStream nextPut: $)! !Object subclass: #PersonRepository	instanceVariableNames: 'persons'	classVariableNames: ''	package: 'SpecCRUD-Example-UI-Composition'!!PersonRepository methodsFor: 'initialization' stamp: '4/12/2025 10:34'!initialize    "Initialize the instance with an empty collection"    super initialize.    persons := OrderedCollection new! !!PersonRepository methodsFor: 'initialization' stamp: '4/12/2025 10:35'!addPerson: aPerson    "Add a new person"    persons add: aPerson! !!PersonRepository methodsFor: 'initialization' stamp: '4/12/2025 10:35'!allPersons    "Answer all persons, sorted by name"    ^ persons sorted: [ :a :b | a name < b name ]! !!PersonRepository methodsFor: 'initialization' stamp: '4/12/2025 10:35'!removePerson: aPerson    "Remove a person"    persons remove: aPerson ifAbsent: []! !!PersonRepository methodsFor: 'initialization' stamp: '4/12/2025 10:36'!updatePerson: oldPerson with: newPersonData    "Find oldPerson and update its state with data from newPersonData.     Note: This assumes newPersonData is a Person object holding the new values.     A more robust approach might involve finding by a unique ID if names/ages can change."    | personToUpdate |    personToUpdate := persons detect: [ :p | p == oldPerson ] ifNone: [ ^ self ]. "Find the exact instance"    personToUpdate name: newPersonData name.    personToUpdate age: newPersonData age.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PersonRepository class	instanceVariableNames: 'SoleInstance'!!PersonRepository class methodsFor: 'class initialization' stamp: '4/12/2025 10:34'!current    "Answer the singleton instance, creating it if necessary"    ^ SoleInstance ifNil: [ SoleInstance := self new ]! !!PersonRepository class methodsFor: 'class initialization' stamp: '4/12/2025 10:34'!reset    "Reset the repository (useful for testing)"    SoleInstance := nil! !!PersonRepository class methodsFor: 'class initialization' stamp: '4/13/2025 10:08'!initialize    "Initialize the singleton instance"    SoleInstance := nil! !Object subclass: #PersonEditor	instanceVariableNames: 'person nameInput ageInput okButton cancelButton dialogPresenter title'	classVariableNames: ''	package: 'SpecCRUD-Example-UI-Composition'!!PersonEditor methodsFor: 'accessing' stamp: '4/15/2025 19:01'!title    ^ title ifNil: [ 'Person Editor' ]! !!PersonEditor methodsFor: 'accessing' stamp: '4/17/2025 14:28'!title: aString    title := aString.    "dialogPresenter ifNotNil: [ dialogPresenter title: title ]" "Update if already initialized"! !!PersonEditor methodsFor: 'accessing' stamp: '4/15/2025 10:37'!person: aPerson    "Set the person and update the input fields"    person := aPerson.    nameInput text: person name.    ageInput number: person age! !!PersonEditor methodsFor: 'accessing' stamp: '4/12/2025 10:55'!person    "Answer the person being edited/created"    ^ person! !!PersonEditor methodsFor: 'accessing' stamp: '4/18/2025 10:04'!openModal    "Open the managed dialog presenter modally"    ^ dialogPresenter openModal.  "Returns true if accepted, false if rejected"! !!PersonEditor methodsFor: 'main' stamp: '4/15/2025 19:04'!cancel    "Called when Cancel button is pressed"    dialogPresenter cancel! !!PersonEditor methodsFor: 'main' stamp: '4/15/2025 19:04'!ok    "Called when OK button is pressed. Validate and apply changes."    | name age |    name := nameInput text trimBoth.    age := ageInput number.    (name isEmpty) ifTrue: [        ^ UIManager default inform: 'Name cannot be empty.'.    ].    (age isNil or: [ age < 0 ]) ifTrue: [         ^ UIManager default inform: 'Please enter a valid non-negative age.'.    ].    "Update the person object"    person name: name.    person age: age.    "Close the dialog successfully"    dialogPresenter accept! !!PersonEditor methodsFor: 'main' stamp: '4/15/2025 19:06'!getIconOk    ^ dialogPresenter iconNamed: #smallOk! !!PersonEditor methodsFor: 'main' stamp: '4/15/2025 19:06'!getIconCancel    ^ dialogPresenter iconNamed: #smallCancel! !!PersonEditor methodsFor: 'layout' stamp: '4/18/2025 11:15'!initializePresenters    "Create the UI components - these are now regular Spec presenters"    dialogPresenter := SpDialogPresenter new.			    nameInput := SpTextInputFieldPresenter new. "same as 'self newTextInput' when subclassing SpDialogPresenter "    ageInput := SpNumberInputFieldPresenter new "same as 'self newNumberInput' when subclassing SpDialogPresenter "                    minimum: 0;                    maximum: 150;                    yourself.    okButton := SpButtonPresenter new "same as 'self newButton' when subclassing SpDialogPresenter "                    label: 'OK';						  icon: self getIconOk;                    action: [ self ok ].    cancelButton := SpButtonPresenter new                    label: 'Cancel';						  icon: self getIconCancel;                    action: [ self cancel ].    dialogPresenter focusOrder        add: nameInput;        add: ageInput;        add: okButton! !!PersonEditor methodsFor: 'layout' stamp: '4/17/2025 14:25'!initialize    "Initialize the editor logic and create the managed presenters"    super initialize.    self initializePresenters.    self initializeLayout.    "self initializeWindowAspects."! !!PersonEditor methodsFor: 'layout' stamp: '4/18/2025 09:58'!initializeLayout    "Define the layout and set it on the managed dialog presenter"    | layout |    layout := SpBoxLayout newVertical			add: 'Name:' expand: false;			add: nameInput;			add: 'Age:' expand: false;			add: ageInput;			add: (SpBoxLayout newHorizontal add: okButton; add: cancelButton; yourself) expand: false;			yourself.    dialogPresenter layout: layout! !!PersonEditor methodsFor: 'layout' stamp: '4/15/2025 19:00'!initializeWindowAspects    "Configure the dialog presenter's window properties"    dialogPresenter        title: self title;        initialExtent: 300 @ 180! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PersonEditor class	instanceVariableNames: ''!!PersonEditor class methodsFor: 'as yet unclassified' stamp: '4/17/2025 14:32'!openModalFor: aPerson title: aString    "Open the editor modally.     Uses composition: Creates a PersonEditor instance which manages a SpDialogPresenter.     Returns the edited/created person if OK is pressed, nil otherwise."    | editor result |    editor := self new.    editor title: aString.    editor person: (aPerson ifNil: [ Person new ] ifNotNil: [ aPerson copy ]). "Edit a copy"	 result := editor openModal. "Calls the instance-side openModal"    ^ result ifNotNil: [ editor person ] ifNil: [ nil ] ! !PersonRepository initialize!