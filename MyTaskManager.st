Object subclass: #Task	instanceVariableNames: 'description isComplete'	classVariableNames: ''	package: 'MyTaskManager'!!Task methodsFor: 'accessing' stamp: '4/20/2025 11:22'!description	^ description! !!Task methodsFor: 'accessing' stamp: '4/20/2025 11:22'!description: aString	description := aString! !!Task methodsFor: 'accessing' stamp: '4/20/2025 11:22'!isComplete	^ isComplete ifNil: [ false ] "Default to false if not set"! !!Task methodsFor: 'accessing' stamp: '4/20/2025 11:22'!isComplete: aBoolean	isComplete := aBoolean! !!Task methodsFor: 'accessing' stamp: '4/20/2025 11:23'!toggleComplete    self isComplete: self isComplete not.! !!Task methodsFor: 'accessing' stamp: '4/20/2025 11:23'!initialize    super initialize.    description := ''.    isComplete := false.! !!Task methodsFor: 'accessing' stamp: '4/20/2025 11:24'!printOn: aStream    super printOn: aStream.    aStream        nextPut: $(;        nextPutAll: self description;        nextPutAll: (self isComplete ifTrue: [' - Done'] ifFalse: [' - Pending']);        nextPut: $)! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Task class	instanceVariableNames: ''!!Task class methodsFor: 'accessing' stamp: '4/20/2025 11:24'!description: aString    ^ self new        description: aString;        yourself! !Object subclass: #TaskRepository	instanceVariableNames: 'tasks'	classVariableNames: ''	package: 'MyTaskManager'!!TaskRepository methodsFor: 'initialization' stamp: '4/21/2025 16:13'!initialize    super initialize.    tasks := OrderedCollection new.    self loadSampleData.! !!TaskRepository methodsFor: 'accessing' stamp: '4/21/2025 16:13'!tasks	^ tasks! !!TaskRepository methodsFor: 'accessing' stamp: '4/21/2025 16:13'!addTask: aTask    tasks add: aTask.    ^ aTask! !!TaskRepository methodsFor: 'accessing' stamp: '4/21/2025 16:14'!removeTask: aTask    tasks remove: aTask ifAbsent: [ ].    ^ aTask! !!TaskRepository methodsFor: 'accessing' stamp: '4/21/2025 16:14'!loadSampleData    "Only load sample data if repository is empty"    tasks ifNotEmpty: [ ^ self ].        self addTask: (Task description: 'Learn Pharo').    self addTask: (Task description: 'Build Spec2 App').    (tasks at: 2) isComplete: true.    self addTask: (Task description: 'Drink Coffee').! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TaskRepository class	instanceVariableNames: 'uniqueInstance'!!TaskRepository class methodsFor: 'accessing' stamp: '4/21/2025 16:10'!default    "Return the singleton instance"    ^ self uniqueInstance! !!TaskRepository class methodsFor: 'accessing' stamp: '4/21/2025 16:11'!uniqueInstance    "Lazy initialization of the singleton instance"    ^ uniqueInstance ifNil: [ uniqueInstance := self new ]! !!TaskRepository class methodsFor: 'accessing' stamp: '4/21/2025 16:11'!reset    "Reset the singleton instance - useful for testing"    uniqueInstance := nil! !SpPresenter subclass: #TaskManagerApp	instanceVariableNames: 'displayedTasks selectedTask taskList taskInputField addButton removeButton filterAllRadio filterPendingRadio filterCompletedRadio currentFilter'	classVariableNames: ''	package: 'MyTaskManager'!!TaskManagerApp methodsFor: 'initialization' stamp: '4/21/2025 18:42'!applyFilter    | previouslySelected allTasks |    previouslySelected := selectedTask. "Remember selection"    selectedTask := nil.    removeButton disable.    "Get tasks from repository"    allTasks := self taskRepository tasks.       displayedTasks removeAll.    allTasks do: [ :task |        	| shouldInclude all pending completed |			all := (currentFilter == #all).			pending := ( currentFilter == #pending and: task isComplete not ).			completed := ( currentFilter == #completed and: task isComplete ).		       	shouldInclude := all            or: [ pending             or: completed ].                   	shouldInclude ifTrue: [             displayedTasks add: task ].    ].        taskList items: displayedTasks.        "Try to restore selection if the item is still visible"    (displayedTasks includes: previouslySelected) ifTrue: [        taskList selectItem: previouslySelected.    ].! !!TaskManagerApp methodsFor: 'initialization' stamp: '4/21/2025 16:28'!addTask    | description newTask |    description := taskInputField text trimBoth.    description ifEmpty: [ ^ self ]. "Do nothing if input is empty"        newTask := Task description: description.    self taskRepository addTask: newTask.        taskInputField text: ''. "Clear input"    taskInputField takeKeyboardFocus.        self applyFilter. "Re-apply filter to show the new task"! !!TaskManagerApp methodsFor: 'initialization' stamp: '4/21/2025 14:04'!toggleTaskStatus: aTask    aTask ifNil: [ ^ self ].    aTask toggleComplete.        "Re-apply filter as task might need to be hidden/shown"    self applyFilter.! !!TaskManagerApp methodsFor: 'initialization' stamp: '4/21/2025 16:29'!removeSelectedTask    | confirmMessage |    selectedTask ifNil: [ ^ self ].        confirmMessage := 'Remove task "', selectedTask description, '"?'.    (self confirm: confirmMessage) ifFalse: [ ^ self ].        self taskRepository removeTask: selectedTask.    selectedTask := nil.    removeButton disable.        self applyFilter. "Update the list"! !!TaskManagerApp methodsFor: 'initialization' stamp: '4/21/2025 18:45'!initialize    super initialize.        "Initialize filtered task collection"    displayedTasks := OrderedCollection new.    currentFilter := #all. "Initial filter state"    self applyFilter. "display current list of tasks"! !!TaskManagerApp methodsFor: 'initialization' stamp: '4/21/2025 16:18'!initializePresenters    "Task List (Table)"    taskList := self newTable.    taskList        addColumn: ((SpCheckBoxTableColumn             title: 'Done'             evaluated: [ :task | task isComplete ])                 onActivation: [ :task | self toggleTaskStatus: task ];                onDeactivation: [ :task | self toggleTaskStatus: task ];                yourself);        addColumn: (SpStringTableColumn             title: 'Description'             evaluated: [ :task | task description ]).        "Input Field"    taskInputField := self newTextInput        placeholder: 'Enter new task description';        yourself.        "Buttons"    addButton := self newButton        label: 'Add Task';        icon: (self iconNamed: #smallAdd);        action: [ self addTask ];        yourself.        removeButton := self newButton        label: 'Remove Task';        icon: (self iconNamed: #smallDelete);        action: [ self removeSelectedTask ];        disable;        yourself.        "Filter Radio Buttons"    filterAllRadio := self newRadioButton label: 'All'.    filterPendingRadio := self newRadioButton label: 'Pending'.    filterCompletedRadio := self newRadioButton label: 'Completed'.	 filterAllRadio associatedRadioButtons: { filterPendingRadio. filterCompletedRadio }.	 	 filterAllRadio state: true. "Set the default selection "! !!TaskManagerApp methodsFor: 'initialization' stamp: '4/21/2025 18:44'!connectPresenters    "Connect List Selection, so that delete button becomes selectable"    taskList whenSelectionChangedDo: [ :selection |         self onTaskSelection: selection ].        "Connect Filter Changes"    filterAllRadio  whenActivatedDo: [ 							currentFilter := #all.							self applyFilter ].    filterPendingRadio  whenActivatedDo: [ 							currentFilter := #pending.							self applyFilter ].    filterCompletedRadio whenActivatedDo: [ 							currentFilter := #completed.							self applyFilter ].        "Connect Input Field Submission (Enter key)"    taskInputField whenSubmitDo: [ :text |         self addTask ].! !!TaskManagerApp methodsFor: 'initialization' stamp: '4/21/2025 16:26'!onTaskSelection: aSelectionMode	"enable remove button when a task is selected"    selectedTask := aSelectionMode selectedItem.    selectedTask         ifNil: [ removeButton disable ]        ifNotNil: [ removeButton enable ].! !!TaskManagerApp methodsFor: 'initialization' stamp: '4/21/2025 16:17'!taskRepository    "Access the task repository singleton"    ^ TaskRepository default! !!TaskManagerApp methodsFor: 'as yet unclassified' stamp: '4/21/2025 13:58'!defaultLayout    | filterLayout inputLayout buttonLayout |        filterLayout := SpBoxLayout newHorizontal        add: filterAllRadio;        add: filterPendingRadio;        add: filterCompletedRadio;        spacing: 10;        yourself.        inputLayout := SpBoxLayout newHorizontal        add: taskInputField expand: true fill: true padding: 0;        add: addButton expand: false fill: false padding: 0;        spacing: 5;        yourself.        buttonLayout := SpBoxLayout newHorizontal        addLast: removeButton expand: false;        yourself.        ^ SpBoxLayout newVertical        add: filterLayout height: self class toolbarHeight;        add: taskList expand: true fill: true padding: 0;        add: inputLayout height: self class inputTextHeight;        add: buttonLayout height: self class buttonHeight;        spacing: 5;        yourself! !!TaskManagerApp methodsFor: 'as yet unclassified' stamp: '4/21/2025 18:50'!initializeWindow: aWindowPresenter	aWindowPresenter title: 'Simple Task Manager'! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TaskManagerApp class	instanceVariableNames: ''!!TaskManagerApp class methodsFor: 'as yet unclassified' stamp: '4/20/2025 15:48'!open    <example>    | inst |    inst := self new.    inst open title: 'Simple Task Manager'. "Set a window title"    ^ inst! !PackageManifest subclass: #ManifestMyTaskManager	instanceVariableNames: ''	classVariableNames: ''	package: 'MyTaskManager-Manifest'!!ManifestMyTaskManager commentStamp: '<historical>' prior: 0!Please describe the package using the class comment of the included manifest class. The manifest class also includes other additional metadata for the package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ManifestMyTaskManager class	instanceVariableNames: ''!!ManifestMyTaskManager class commentStamp: '<historical>' prior: 0!Please describe the package using the class comment of the included manifest class. The manifest class also includes other additional metadata for the package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser!!ManifestMyTaskManager class methodsFor: 'code-critics' stamp: '4/20/2025 11:33'!ruleSendsUnknownMessageToGlobalRuleV1FalsePositive	<ignoreForCoverage>	^ #(#(#(#RGMethodDefinition #(#TaskManagerApp #loadSampleData #false)) #'2025-04-20T11:33:38.711123-04:00') )! !!ManifestMyTaskManager class methodsFor: 'code-critics' stamp: '4/21/2025 12:36'!ruleCollectionProtocolRuleV1FalsePositive	<ignoreForCoverage>	^ #(#(#(#RGMethodDefinition #(#TaskManagerApp #applyFilter #false)) #'2025-04-21T12:36:08.757547-04:00') )! !