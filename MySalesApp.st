Object subclass: #SalesMonthlyReport	instanceVariableNames: 'salesData monthlyTotals'	classVariableNames: ''	package: 'MySalesApp'!!SalesMonthlyReport methodsFor: 'initialization' stamp: '5/5/2025 13:29'!loadData    | salesEntries |        salesEntries := self sampleData.    self monthlySalesTotals: salesEntries.! !!SalesMonthlyReport methodsFor: 'initialization' stamp: '5/5/2025 13:48'!initialize   monthlyTotals := OrderedDictionary new.	self loadData.	self showBarPlot.    ! !!SalesMonthlyReport methodsFor: 'initialization' stamp: '5/3/2025 18:17'!monthlySalesTotals: salesCollection   salesCollection do: [ :entry |        | monthKey |        monthKey := entry date asString.        monthlyTotals             at: monthKey            put: (monthlyTotals at: monthKey ifAbsent: [0]) + entry amount    ].! !!SalesMonthlyReport methodsFor: 'initialization' stamp: '5/5/2025 13:29'!showBarPlot    |  barPlot sortedMonthlyTotals |    sortedMonthlyTotals := (monthlyTotals associations sorted: [ :a :b | a key < b key ]) asOrderedDictionary.	 barPlot := RSBarPlot  new.	 barPlot y: sortedMonthlyTotals values.	 barPlot color: Color green.	 barPlot xTickLabels: sortedMonthlyTotals keys.	 barPlot open.! !!SalesMonthlyReport methodsFor: 'initialization' stamp: '5/5/2025 12:54'!sampleData	| data |	data := OrderedCollection new.	data add: (SalesEntry new date: (Date year: 2018 month: 9 day: 28) monthIndex; amount: 100; yourself).		data add: (SalesEntry new date: (Date year: 2018 month: 1 day: 28) monthIndex; amount: 100; yourself).	data add: (SalesEntry new date: (Date year: 2018 month: 1 day: 15) monthIndex; amount: 100; yourself).	data add: (SalesEntry new date: (Date year: 2018 month: 1 day: 3) monthIndex; amount: 100; yourself).	data add: (SalesEntry new date: (Date year: 2018 month: 7 day: 28) monthIndex; amount: 100; yourself).	data add: (SalesEntry new date: (Date year: 2018 month: 4 day: 28) monthIndex; amount: 100; yourself).	data add: (SalesEntry new date: (Date year: 2018 month: 4 day: 28) monthIndex; amount: 100; yourself).		data add: (SalesEntry new date: (Date year: 2018 month: 1 day: 28) monthIndex; amount: 100; yourself).	data add: (SalesEntry new date: (Date year: 2018 month: 1 day: 15) monthIndex; amount: 100; yourself).	data add: (SalesEntry new date: (Date year: 2018 month: 1 day: 3) monthIndex; amount: 100; yourself).		^ data! !Object subclass: #SalesEntry	instanceVariableNames: 'date amount'	classVariableNames: ''	package: 'MySalesApp'!!SalesEntry methodsFor: 'accessing' stamp: '4/28/2025 11:17'!date	^ date! !!SalesEntry methodsFor: 'accessing' stamp: '4/28/2025 11:17'!date: anObject	date := anObject! !!SalesEntry methodsFor: 'accessing' stamp: '4/28/2025 11:17'!amount	^ amount! !!SalesEntry methodsFor: 'accessing' stamp: '4/28/2025 11:17'!amount: anObject	amount := anObject! !!SalesEntry methodsFor: 'accessing' stamp: '5/3/2025 18:23'!<= aSalesEntry"needed for sorted collections"	^ self date <= aSalesEntry date.! !!SalesEntry methodsFor: 'accessing' stamp: '5/3/2025 18:24'!= aSalesEntry "needed for sorted collections; must also override #hash when overriding #="	^ 	(self amount = aSalesEntry amount) &		(self date = aSalesEntry date).! !!SalesEntry methodsFor: 'accessing' stamp: '5/5/2025 13:44'!hash"The basic rule is never override #= without overriding #hash""needed for #= override; objects that are equal have to have the same hash "	^  date hash 	   bitXor: (amount hash).! !