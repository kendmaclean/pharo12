SpPresenter subclass: #PersonBrowser	instanceVariableNames: 'listPresenter addButton editButton deleteButton selectedPerson'	classVariableNames: ''	package: 'SpecCRUD-Example-UI'!!PersonBrowser methodsFor: 'layout' stamp: '4/12/2025 13:10'!defaultLayout    "List on top, buttons below"    ^ SpBoxLayout newVertical          add: listPresenter;          add: (SpBoxLayout newHorizontal                   add: addButton expand: false;                   add: editButton expand: false;                   add: deleteButton expand: false;                   yourself)              expand: false;          yourself! !!PersonBrowser methodsFor: 'layout' stamp: '4/12/2025 13:23'!initializePresenters    "Create and configure the UI components"    listPresenter := self newList.    listPresenter display: [ :item | item displayString ]. "How to show persons in the list"    listPresenter whenSelectionChangedDo: [ :selection | self updateSelection: selection ].    addButton := self newButton                     label: 'Add';                     icon: (self iconNamed: #smallAdd);                     action: [ self addPerson ].    editButton := self newButton                      label: 'Edit';                      icon: (self iconNamed: #smallEdit);                      action: [ self editPerson ];                      disable. "Initially disabled"    deleteButton := self newButton                        label: 'Delete';                        icon: (self iconNamed: #smallDelete);                        action: [ self deletePerson ];                        disable. "Initially disabled"    self updatePersonList "Load initial data"! !!PersonBrowser methodsFor: 'layout' stamp: '4/12/2025 13:11'!initializeWindow: aWindowPresenter    "Configure the main window"    aWindowPresenter        title: 'Person CRUD Example';        initialExtent: 400 @ 300! !!PersonBrowser methodsFor: 'layout' stamp: '4/12/2025 13:11'!updatePersonList    "Refresh the list from the repository and maintain selection if possible"    | previouslySelected |    previouslySelected := selectedPerson.    listPresenter items: PersonRepository current allPersons.    "Try to re-select the previously selected item"    (previouslySelected notNil and: [ listPresenter items includes: previouslySelected ])        ifTrue: [ listPresenter selectItem: previouslySelected ]        ifFalse: [ self updateSelection: listPresenter selection ] "Update button states even if selection cleared"! !!PersonBrowser methodsFor: 'layout' stamp: '4/12/2025 13:11'!updateSelection: aSelectionPresenter    "Called when the list selection changes"    selectedPerson := aSelectionPresenter selectedItem.    editButton enabled: selectedPerson notNil.    deleteButton enabled: selectedPerson notNil! !!PersonBrowser methodsFor: 'layout' stamp: '4/12/2025 13:11'!addPerson    "Open the editor to add a new person"    | newPerson |    newPerson := PersonEditor openModalFor: nil title: 'Add New Person'.    newPerson ifNotNil: [        PersonRepository current addPerson: newPerson.        self updatePersonList.        listPresenter selectItem: newPerson "Select the newly added item"    ]! !!PersonBrowser methodsFor: 'layout' stamp: '4/12/2025 13:12'!editPerson    "Open the editor to edit the selected person"    | editedPerson originalPerson |    selectedPerson ifNil: [ ^ self ]. "Should not happen if button is enabled, but be safe"    originalPerson := selectedPerson. "Keep track of the original instance"    editedPerson := PersonEditor openModalFor: originalPerson title: 'Edit Person'.    editedPerson ifNotNil: [        "Update the original person object in the repository with the new data"        PersonRepository current updatePerson: originalPerson with: editedPerson.        self updatePersonList. "Refresh the list"        listPresenter selectItem: originalPerson "Re-select the edited item (it's the same instance)"    ]! !!PersonBrowser methodsFor: 'layout' stamp: '4/13/2025 11:48'!deletePerson    "Delete the selected person after confirmation"    | personToDelete |    personToDelete := selectedPerson.    personToDelete ifNil: [ ^ self ]. "Should not happen"    (UIManager default confirm: 'Are you sure you want to delete ', personToDelete displayString, '?')        ifTrue: [            PersonRepository current removePerson: personToDelete.            selectedPerson := nil. "Clear selection reference"            self updatePersonList "Refresh the list"        ]			ifFalse: [ ^ nil ]			! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PersonBrowser class	instanceVariableNames: ''!!PersonBrowser class methodsFor: 'instance creation' stamp: '4/12/2025 13:14'!open    "Convenience method to open the browser"    <script>    ^ self new open! !SpDialogPresenter subclass: #PersonEditor	instanceVariableNames: 'person nameInput ageInput okButton cancelButton title'	classVariableNames: ''	package: 'SpecCRUD-Example-UI'!!PersonEditor methodsFor: 'accessing' stamp: '4/12/2025 18:47'!title	^ title! !!PersonEditor methodsFor: 'accessing' stamp: '4/12/2025 18:47'!title: anObject	title := anObject! !!PersonEditor methodsFor: 'accessing' stamp: '4/15/2025 10:37'!person: aPerson    "Set the person and update the input fields"    person := aPerson.    nameInput text: person name.    ageInput number: person age! !!PersonEditor methodsFor: 'accessing' stamp: '4/12/2025 10:55'!person    "Answer the person being edited/created"    ^ person! !!PersonEditor methodsFor: 'main' stamp: '4/13/2025 10:28'!cancel    "Called when Cancel button is pressed"    super cancel! !!PersonEditor methodsFor: 'main' stamp: '4/13/2025 11:52'!ok    "Called when OK button is pressed. Validate and apply changes."    | name age |    name := nameInput text trimBoth.    age := ageInput number.    (name isEmpty) ifTrue: [        ^ UIManager default inform: 'Name cannot be empty.'.    ].    (age isNil or: [ age < 0 ]) ifTrue: [         ^ UIManager default inform: 'Please enter a valid non-negative age.'.    ].    "Update the person object"    person name: name.    person age: age.    "Close the dialog successfully"    self accept! !!PersonEditor methodsFor: 'layout' stamp: '4/13/2025 10:26'!initializeWindow: aWindowPresenter    "Configure the dialog window"    super initializeWindow: aWindowPresenter.    aWindowPresenter        title: self title;        initialExtent: 300 @ 180! !!PersonEditor methodsFor: 'layout' stamp: '4/15/2025 10:34'!initializePresenters    "Create the UI components"    nameInput := self newTextInput.    ageInput := self newNumberInput                    minimum: 0; "Optional: Set minimum age"                    maximum: 150; "Optional: Set maximum age"                    yourself.    okButton := self newButton                    label: 'OK';                    icon: (self iconNamed: #smallOk);                    action: [ self ok ].    cancelButton := self newButton                        label: 'Cancel';                        icon: (self iconNamed: #smallCancel);                        action: [ self cancel ].    self focusOrder        add: nameInput;        add: ageInput;        add: okButton! !!PersonEditor methodsFor: 'layout' stamp: '4/13/2025 10:25'!defaultLayout    "Define the layout: labels and inputs vertically, buttons horizontally at the bottom"    ^ SpBoxLayout newVertical          add: 'Name:' expand: false;          add: nameInput;          add: 'Age:' expand: false;          add: ageInput;          add: (SpBoxLayout newHorizontal add: okButton; add: cancelButton; yourself) expand: false;          yourself! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PersonEditor class	instanceVariableNames: ''!!PersonEditor class methodsFor: 'as yet unclassified' stamp: '4/14/2025 16:27'!openModalFor: aPerson title: aString    "Open the editor modally.     If aPerson is nil, we are creating a new Person.     Otherwise, we are editing aPerson.     Returns the edited/created person if OK is pressed, nil otherwise."    | instance result |    instance := self new.    instance title: aString.    instance person: (aPerson ifNil: [ Person new ] ifNotNil: [ aPerson copy ]). "Edit a copy"	 "instance onAccept: [ ^ instance person ].	 instance onCancel: [ nil ].    instance openModal.     instance close: [  nil ]"	result := instance openModal.   ^ result ifNotNil: [ instance person ] ifNil: [ nil ] ! !