PackageManifest subclass: #ManifestSimpleInventoryApp	instanceVariableNames: ''	classVariableNames: ''	package: 'SimpleInventoryApp-Manifest'!!ManifestSimpleInventoryApp commentStamp: '<historical>' prior: 0!Please describe the package using the class comment of the included manifest class. The manifest class also includes other additional metadata for the package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ManifestSimpleInventoryApp class	instanceVariableNames: ''!!ManifestSimpleInventoryApp class commentStamp: '<historical>' prior: 0!Please describe the package using the class comment of the included manifest class. The manifest class also includes other additional metadata for the package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser!!ManifestSimpleInventoryApp class methodsFor: 'code-critics' stamp: '4/23/2025 15:01'!ruleReGuardClauseRuleV1FalsePositive	<ignoreForCoverage>	^ #(#(#(#RGMethodDefinition #(#InventoryApp #addProductAction #false)) #'2025-04-23T15:01:57.611732-04:00') )! !!ManifestSimpleInventoryApp class methodsFor: 'code-critics' stamp: '4/26/2025 11:11'!ruleGuardingClauseRuleV1FalsePositive	<ignoreForCoverage>	^ #(#(#(#RGMethodDefinition #(#InventoryApp #addProductAction #false)) #'2025-04-23T15:02:22.967236-04:00') #(#(#RGMethodDefinition #(#InventoryApp #removeProductAction #false)) #'2025-04-26T11:11:22.84353-04:00') )! !Object subclass: #Product	instanceVariableNames: 'name description quantity price'	classVariableNames: ''	package: 'SimpleInventoryApp'!!Product methodsFor: 'initialization' stamp: '4/23/2025 13:56'!initialize    super initialize.    name := ''.    description := ''.    quantity := 0.! !!Product methodsFor: 'initialization' stamp: '4/23/2025 13:55'!name    ^ name ifNil: [ '' ]! !!Product methodsFor: 'initialization' stamp: '4/23/2025 13:55'!name: aString    name := aString! !!Product methodsFor: 'initialization' stamp: '4/23/2025 13:55'!description    ^ description ifNil: [ '' ]! !!Product methodsFor: 'initialization' stamp: '4/23/2025 13:55'!description: aString    description := aString! !!Product methodsFor: 'initialization' stamp: '4/23/2025 13:55'!quantity    ^ quantity ifNil: [ 0 ]! !!Product methodsFor: 'initialization' stamp: '4/24/2025 19:40'!quantity: anInteger    quantity := anInteger! !!Product methodsFor: 'initialization' stamp: '4/25/2025 10:09'!price    ^ price ifNil: [ 0 ]! !!Product methodsFor: 'initialization' stamp: '4/23/2025 13:56'!price: aNumber    price := aNumber! !!Product methodsFor: 'initialization' stamp: '4/23/2025 13:56'!increaseStockBy: amount    self quantity: self quantity + amount! !!Product methodsFor: 'initialization' stamp: '4/23/2025 13:56'!decreaseStockBy: amount    self quantity: self quantity - amount! !!Product methodsFor: 'initialization' stamp: '4/23/2025 13:56'!printOn: aStream    aStream        nextPutAll: self class name;        nextPutAll: ' (';        nextPutAll: self name;        nextPutAll: ' - Qty: ';        print: self quantity;        nextPutAll: ')'! !!Product methodsFor: 'initialization' stamp: '4/23/2025 13:57'!displayString    ^ String streamContents: [ :s |        s << self name.        s << ' (Qty: ' << self quantity asString.        self price ifNotNil: [ :p | s << ', Price: $' << p asString ].        s << ')' ]! !!Product methodsFor: 'initialization' stamp: '4/23/2025 14:11'!initializeWindow: aWindowPresenter  aWindowPresenter    title: 'Simple Inventory System';    initialExtent:  600@450.! !Object subclass: #ProductRepository	instanceVariableNames: 'products'	classVariableNames: ''	package: 'SimpleInventoryApp'!!ProductRepository methodsFor: 'initialization' stamp: '4/25/2025 22:33'!initialize    "Initialize the instance with an empty collection"    super initialize.    products := OrderedCollection new! !!ProductRepository methodsFor: 'initialization' stamp: '4/25/2025 22:33'!allProducts    "Answer all products, sorted by name"    ^ products sorted: [ :a :b | a name < b name ]! !!ProductRepository methodsFor: 'initialization' stamp: '4/25/2025 22:34'!addProduct: aProduct    "Add a new product"    products add: aProduct! !!ProductRepository methodsFor: 'initialization' stamp: '4/25/2025 22:35'!removeProduct: aProduct    "Add a new product"    products remove: aProduct ifAbsent: []! !!ProductRepository methodsFor: 'initialization' stamp: '4/26/2025 15:43'!updateProduct: oldProduct with: newProductData    "Find oldProduct and update its state with data from newProductData.     Note: This assumes newProductData is a Product object holding the new values.     A more robust approach might involve finding by a unique ID if names/ages can change."    | productToUpdate |    productToUpdate := products detect: [ :p | p == oldProduct ] ifNone: [ ^ self ]. "Find the exact instance"    productToUpdate name: newProductData name.    productToUpdate description: newProductData description.    productToUpdate quantity: newProductData quantity.    productToUpdate price: newProductData price.! !!ProductRepository methodsFor: 'initialization' stamp: '4/26/2025 11:17'!addSampleData    self         addProduct: (Product new name: 'Laptop'; description: '14 inch Ultrabook'; quantity: 10; price: 1200.00);        addProduct: (Product new name: 'Keyboard'; description: 'Mechanical Keyboard'; quantity: 25; price: 75.50);        addProduct: (Product new name: 'Mouse'; description: 'Wireless Optical Mouse'; quantity: 50; price: 25.00).! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ProductRepository class	instanceVariableNames: 'SoleInstance'!!ProductRepository class methodsFor: 'class initialization' stamp: '4/25/2025 22:32'!current    "Answer the singleton instance, creating it if necessary"    ^ SoleInstance ifNil: [ SoleInstance := self new ]! !!ProductRepository class methodsFor: 'class initialization' stamp: '4/25/2025 22:32'!reset    "Reset the repository (useful for testing)"    SoleInstance := nil! !SpPresenter subclass: #InventoryApp	instanceVariableNames: 'selectedProduct productList addButton editButton removeButton increaseStockButton decreaseStockButton'	classVariableNames: ''	package: 'SimpleInventoryApp'!!InventoryApp methodsFor: 'initialization' stamp: '4/26/2025 15:52'!initializePresenters    productList := self newList        items: ProductRepository current allProducts;        display: [ :item | item displayString ];        whenSelectionChangedDo: [ :selection |            selectedProduct := selection selectedItem.            self updateButtonStates ];        yourself.            self initializeButtons.    self updateButtonStates.! !!InventoryApp methodsFor: 'initialization' stamp: '4/23/2025 14:12'!initializeButtons    addButton := self newButton        label: 'Add';        icon: (self iconNamed: #add);        action: [ self addProductAction ];        yourself.            editButton := self newButton        label: 'Edit';        icon: (self iconNamed: #edit);        action: [ self editProductAction ];        yourself.            removeButton := self newButton        label: 'Remove';        icon: (self iconNamed: #remove);        action: [ self removeProductAction ];        yourself.            increaseStockButton := self newButton        label: 'Increase Stock';        icon: (self iconNamed: #up);        action: [ self increaseStockAction ];        yourself.            decreaseStockButton := self newButton        label: 'Decrease Stock';        icon: (self iconNamed: #down);        action: [ self decreaseStockAction ];        yourself.! !!InventoryApp methodsFor: 'initialization' stamp: '4/23/2025 14:40'!defaultLayout    ^ SpBoxLayout newHorizontal        spacing: 10;        add: (self newLabel label: 'Products:') expand: false;        add: productList expand: true;        add: self buildButtonPanel expand: false;        yourself! !!InventoryApp methodsFor: 'initialization' stamp: '4/23/2025 14:46'!buildButtonPanel    ^ SpBoxLayout newVertical        spacing: 5;        add: addButton expand: false;        add: editButton expand: false;        add: removeButton expand: false;        "add: (self newSeparator) expand: false;"        add: increaseStockButton expand: false;        add: decreaseStockButton expand: false;        add: SpBoxLayout newVertical expand: true; "spacer"        yourself! !!InventoryApp methodsFor: 'initialization' stamp: '4/25/2025 22:44'!addProductAction    | newProduct dialog |    newProduct := Product new.    dialog := ProductEditor forProduct: newProduct title: 'Add New Product'.    dialog openModal.        (newProduct name notEmpty) ifTrue: [        "products add: newProduct."	 	  ProductRepository current addProduct: newProduct.        self updateProductList.        productList selectItem: newProduct ]! !!InventoryApp methodsFor: 'initialization' stamp: '4/26/2025 11:24'!editProductAction    | originalProduct dialog editedProduct |    selectedProduct ifNil: [ ^ self ].    originalProduct := selectedProduct. "Keep track of the original instance"    dialog := (ProductEditor forProduct: selectedProduct title: 'Edit Product').	 dialog openModal.	 editedProduct := dialog product.	    editedProduct ifNotNil: [        "Update the original person object in the repository with the new data"        ProductRepository current updateProduct: originalProduct with: editedProduct.        self updateProductList. "Refresh the list"        "listPresenter selectItem: originalPerson"     ]! !!InventoryApp methodsFor: 'initialization' stamp: '4/26/2025 15:59'!removeProductAction    selectedProduct ifNil: [ ^ self ].        (self confirm: 'Are you sure you want to remove ', selectedProduct name, '?')	 ifFalse: [^self].	 ProductRepository current removeProduct: selectedProduct.	 selectedProduct := nil.	 self updateProductList.	 self updateButtonStates  ! !!InventoryApp methodsFor: 'initialization' stamp: '4/23/2025 14:41'!increaseStockAction    self adjustStockAction: [ :product :amount |         product increaseStockBy: amount ]         title: 'Increase Stock by:'! !!InventoryApp methodsFor: 'initialization' stamp: '4/23/2025 14:41'!decreaseStockAction    self adjustStockAction: [ :product :amount |         product decreaseStockBy: amount ]         title: 'Decrease Stock by:'! !!InventoryApp methodsFor: 'initialization' stamp: '4/23/2025 14:42'!adjustStockAction: adjustmentBlock title: aString    | amount |    selectedProduct ifNil: [ ^ self ].        amount := UIManager default        request: aString        initialAnswer: '1'        title: 'Adjust Stock'.            amount ifNil: [ ^ self ].        [ | numericAmount |        numericAmount := amount asNumber.        numericAmount > 0 ifFalse: [ self error: 'Amount must be positive.' ].        adjustmentBlock value: selectedProduct value: numericAmount.        self updateProductList    ] on: Error do: [ :ex |         self inform: 'Invalid amount: ', ex messageText ]! !!InventoryApp methodsFor: 'initialization' stamp: '4/23/2025 14:42'!updateButtonStates    | productSelected |    productSelected := selectedProduct isNotNil.    editButton enabled: productSelected.    removeButton enabled: productSelected.    increaseStockButton enabled: productSelected.    decreaseStockButton enabled: productSelected! !!InventoryApp methodsFor: 'initialization' stamp: '4/26/2025 15:53'!updateProductList    productList items: ProductRepository current allProducts.        (selectedProduct notNil and: [ (ProductRepository current allProducts) includes: selectedProduct ])        ifTrue: [ productList selectItem: selectedProduct ]        ifFalse: [             selectedProduct := nil.            self updateButtonStates ]! !!InventoryApp methodsFor: 'initialization' stamp: '4/23/2025 14:42'!selectedProduct    ^ selectedProduct! !!InventoryApp methodsFor: 'initialization' stamp: '4/25/2025 17:37'!initializeWindow: aWindowPresenter    super initializeWindow: aWindowPresenter.    aWindowPresenter        title: 'Simple Inventory System';        initialExtent: 400@250.! !!InventoryApp methodsFor: 'initialization' stamp: '4/26/2025 16:03'!initialize    "Add some sample data if the repository is empty"    ProductRepository current allProducts isEmpty ifTrue: [        ProductRepository current addSampleData ].    super initialize.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!InventoryApp class	instanceVariableNames: ''!!InventoryApp class methodsFor: 'instance creation' stamp: '4/23/2025 14:08'!open    <script>    ^ self new open! !SpPresenter subclass: #ProductEditor	instanceVariableNames: 'title product nameInput descriptionInput quantityInput priceInput'	classVariableNames: ''	package: 'SimpleInventoryApp'!!ProductEditor methodsFor: 'accessing' stamp: '4/25/2025 15:41'!product: aProduct    product := aProduct.	 self updateFormFields.! !!ProductEditor methodsFor: 'accessing' stamp: '4/25/2025 15:39'!initializePresenters    nameInput := self newTextInput        placeholder: 'Product Name';        text: (product name);        yourself.    descriptionInput := self newTextInput        placeholder: 'Description';        text: (product description);        yourself.    quantityInput := self newNumberInput        beInteger;        minimum: 0;        placeholder: 'Quantity';        number: (product quantity);        yourself.    priceInput := self newNumberInput        beFloat;        digits: 2;        minimum: 0;        placeholder: 'Price (optional)';        number: (product price);        yourself.! !!ProductEditor methodsFor: 'accessing' stamp: '4/25/2025 15:37'!defaultLayout    ^ SpGridLayout new        borderWidth: 5;        columnSpacing: 10;        rowSpacing: 5;        add: 'Name:' at: 1@1; add: nameInput at: 2@1;        add: 'Description:' at: 1@2; add: descriptionInput at: 2@2;        add: 'Quantity:' at: 1@3; add: quantityInput at: 2@3;        add: 'Price:' at: 1@4; add: priceInput at: 2@4;        yourself! !!ProductEditor methodsFor: 'accessing' stamp: '4/25/2025 15:37'!updateProduct    "Update the product model from the input fields"    product        name: nameInput text;        description: descriptionInput text;        quantity: (quantityInput number ifNil: [0]);        price: priceInput number.    ^ product! !!ProductEditor methodsFor: 'accessing' stamp: '4/25/2025 15:37'!initializeDialogWindow: aWindowPresenter    aWindowPresenter        title: (self title ifNil: ['Product Details']);        initialExtent: 400@220;        addButton: 'OK' do: [             self updateProduct.            aWindowPresenter close ];        addButton: 'Cancel' do: [             aWindowPresenter close ]! !!ProductEditor methodsFor: 'accessing' stamp: '4/25/2025 15:40'!updateFormFields    "Update form fields from product"    nameInput text: product name.    descriptionInput text: product description.    quantityInput number: product quantity.    priceInput number: product price.! !!ProductEditor methodsFor: 'accessing' stamp: '4/25/2025 15:44'!nameInput: anObject	nameInput := anObject! !!ProductEditor methodsFor: 'accessing' stamp: '4/25/2025 17:20'!nameInput	^ nameInput! !!ProductEditor methodsFor: 'accessing' stamp: '4/25/2025 17:48'!title	^ title! !!ProductEditor methodsFor: 'accessing' stamp: '4/25/2025 17:48'!title: anObject	title := anObject! !!ProductEditor methodsFor: 'accessing' stamp: '4/26/2025 11:22'!product    ^ product! !!ProductEditor methodsFor: 'initialization' stamp: '4/25/2025 15:40'!initialize    product := Product new.    super initialize.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ProductEditor class	instanceVariableNames: ''!!ProductEditor class methodsFor: 'as yet unclassified' stamp: '4/25/2025 15:35'!forProduct: aProduct    ^ self new        product: aProduct;        yourself! !!ProductEditor class methodsFor: 'as yet unclassified' stamp: '4/25/2025 17:46'!forProduct: aProduct title: aString    ^ (self forProduct: aProduct)        title: aString;        yourself! !