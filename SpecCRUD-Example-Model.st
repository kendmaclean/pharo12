SpPresenter subclass: #Person	instanceVariableNames: 'name age'	classVariableNames: ''	package: 'SpecCRUD-Example-Model'!!Person methodsFor: 'initialization' stamp: '4/12/2025 09:53'!initialize    super initialize.    name := ''.    age := 0! !!Person methodsFor: 'initialization' stamp: '4/12/2025 09:53'!name    ^ name! !!Person methodsFor: 'initialization' stamp: '4/12/2025 09:54'!name: aString    name := aString! !!Person methodsFor: 'initialization' stamp: '4/12/2025 09:54'!age    ^ age! !!Person methodsFor: 'initialization' stamp: '4/12/2025 09:54'!age: anInteger    age := anInteger! !!Person methodsFor: 'initialization' stamp: '4/12/2025 09:54'!displayString    "Used for displaying in lists"    ^ name, ' (', age asString, ')'! !!Person methodsFor: 'initialization' stamp: '4/12/2025 09:54'!printOn: aStream    "Standard printing"    super printOn: aStream.    aStream nextPut: $(.    self displayString printOn: aStream.    aStream nextPut: $)! !Object subclass: #PersonRepository	instanceVariableNames: 'persons'	classVariableNames: ''	package: 'SpecCRUD-Example-Model'!!PersonRepository methodsFor: 'initialization' stamp: '4/12/2025 10:34'!initialize    "Initialize the instance with an empty collection"    super initialize.    persons := OrderedCollection new! !!PersonRepository methodsFor: 'initialization' stamp: '4/12/2025 10:35'!addPerson: aPerson    "Add a new person"    persons add: aPerson! !!PersonRepository methodsFor: 'initialization' stamp: '4/12/2025 10:35'!allPersons    "Answer all persons, sorted by name"    ^ persons sorted: [ :a :b | a name < b name ]! !!PersonRepository methodsFor: 'initialization' stamp: '4/12/2025 10:35'!removePerson: aPerson    "Remove a person"    persons remove: aPerson ifAbsent: []! !!PersonRepository methodsFor: 'initialization' stamp: '4/12/2025 10:36'!updatePerson: oldPerson with: newPersonData    "Find oldPerson and update its state with data from newPersonData.     Note: This assumes newPersonData is a Person object holding the new values.     A more robust approach might involve finding by a unique ID if names/ages can change."    | personToUpdate |    personToUpdate := persons detect: [ :p | p == oldPerson ] ifNone: [ ^ self ]. "Find the exact instance"    personToUpdate name: newPersonData name.    personToUpdate age: newPersonData age.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PersonRepository class	instanceVariableNames: 'SoleInstance'!!PersonRepository class methodsFor: 'class initialization' stamp: '4/12/2025 10:34'!current    "Answer the singleton instance, creating it if necessary"    ^ SoleInstance ifNil: [ SoleInstance := self new ]! !!PersonRepository class methodsFor: 'class initialization' stamp: '4/12/2025 10:34'!reset    "Reset the repository (useful for testing)"    SoleInstance := nil! !!PersonRepository class methodsFor: 'class initialization' stamp: '4/13/2025 10:08'!initialize    "Initialize the singleton instance"    SoleInstance := nil! !PersonRepository initialize!PackageManifest subclass: #ManifestSpecCRUDExampleModel	instanceVariableNames: ''	classVariableNames: ''	package: 'SpecCRUD-Example-Model-Manifest'!!ManifestSpecCRUDExampleModel commentStamp: '<historical>' prior: 0!Please describe the package using the class comment of the included manifest class. The manifest class also includes other additional metadata for the package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ManifestSpecCRUDExampleModel class	instanceVariableNames: ''!!ManifestSpecCRUDExampleModel class commentStamp: '<historical>' prior: 0!Please describe the package using the class comment of the included manifest class. The manifest class also includes other additional metadata for the package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser!!ManifestSpecCRUDExampleModel class methodsFor: 'code-critics' stamp: '4/12/2025 13:13'!ruleCodeCruftLeftInMethodsRuleV1FalsePositive	<ignoreForCoverage>	^ #(#(#(#RGMethodDefinition #(#PersonEditor #ok #false)) #'2025-04-12T11:08:29.397225-04:00') #(#(#RGMethodDefinition #(#PersonBrowser #deletePerson #false)) #'2025-04-12T13:13:48.907149-04:00') )! !!ManifestSpecCRUDExampleModel class methodsFor: 'code-critics' stamp: '4/13/2025 15:42'!ruleUnclassifiedMethodsRuleV1FalsePositive	<ignoreForCoverage>	^ #(#(#(#RGMethodDefinition #(#'PersonEditor class' #openModalFor:title: #true)) #'2025-04-13T15:42:14.208397-04:00') )! !!ManifestSpecCRUDExampleModel class methodsFor: 'code-critics' stamp: '4/14/2025 11:53'!ruleEqualsTrueRuleV1FalsePositive	<ignoreForCoverage>	^ #(#(#(#RGMethodDefinition #(#'PersonEditor class' #openModalFor:title: #true)) #'2025-04-14T11:53:06.182024-04:00') )! !